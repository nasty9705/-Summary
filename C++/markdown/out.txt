          ﻿# Зада-
ние Упрощённый mark-
down

####################
## Общее описание ##
####################

          Требуется 
написать программу 
на языке С++, испол-
ьзующую парадигму 
ООП, отображающую на
 экране форматирова-
нный текст. 
В аргументах команд-
ной строки задаются 
параметры, влияющие 
на стиль отображения
 текста.

          Для разбо-
ра параметов необхо-
димо использовать 
функцию getopt или 
getopt_long Парамет-
ры указываются след-
ующим образом:

1. -f имя файла с 
разметкой,
2. -w ширина экра-
на,
3. -t отступ для 
второй и последую-
щих строк списка 
(число пробелов),
4. -m символ-марк-
ер ненумерованного
 списка,
5. -r величина кр-
асной строки.
6. -h - выдача he-
lp с описанием по-
ведения программы
7. -v - отображен-
ие версии програм-
мы

          Здесь пре-
дполагается, что па-
раметры по ключам 
-w,-t,-m,-r - не об-
язательны и если па-
раметр не указан, 
то задаётся значение
 по умолчанию.
Возможно например 
определение ширины 
экрана при помощи 
системных вызовов 
fstat и ioctl (man 
tty_ioctl).

####################
##    Описание    ##
##    форматов    ##
####################

          Размеченый
 текст состоит из 
абзацев. Существует 
несколько типов абз-
ацев: 



1. нумерованные 
списки, 
2. маркированные 
списки, 


          Абзацы от-
деляются друг от др-
уга двумя и более 
переносами строк. 
Всюду внутри абзацев
 два пробельных 
символа подряд счит-
аются одним пробело-
м.

          Заголовок 
задаётся следующим 
образом:

          \# Текст 
заголовка до конца 
строки

          Заголовки 
могут быть нескольк-
их уровней, уровень 
заголовка задаётся 
числом символов '#' 
подряд в начале.

          Нумерован-
ные списки (число 
перед точкой не игр-
ает роли):

1. первый элемент 
списка
2. второй элемент 
списка

          Маркирова-
нный список задаётся
 по аналогии с нуме-
рованным, используе-
тся символ '*'.

          Списки мо-
гут быть вложены др-
уг в друга, вложенн-
ый список задаётся 
указанием отступа в 
2 пробела
от предыдущего уров-
ня.

          Блок кода.
 Блок кода ничинает-
ся 4-мя пробелами, 
либо одним символом 
табуляции, 
далее идёт собствен-
но код.

          Простые 
абзацы это все оста-
льные абзацы. Чаще 
всего они будут нач-
инаться просто с те-
кста.

          Примером 
разметки является 
текст с заданием.

####################
##    Описание    ##
##    способа    ##
##  отображения  ##
####################

          Для разме-
ченного текста, в 
соответствии с пара-
метрами функции main
 требуется задать 
отображение на экра-
н.

          При отобр-
ажении на экран все 
пробельные символы 
между словами должны
 быть заменены на 
один пробел 
(в памяти хранить 
именно в таком виде-
). В случае, если 
текст не помещается 
на одну строку, в 
него 
вставляются перенос-
ы. Запрещается, что-
бы текст с переноса-
ми вылезал за грани-
цу ширины текста,
также запрещается 
переносить так, что-
бы на строчке остав-
ался бы один символ.
 
В случае невозможно-
сти поставить перен-
ос строка завершает-
ся, а слово пишется 
на следующей строчке
(выдавать предупреж-
дение и завершать 
программу если слово
 оказалось длиннее 
отображаемой ширины 
текста).

          Для списк-
ов в начале ставится
 либо маркер, либо 
число c точкой, дал-
ее через определённ-
ое число пробельных 
символов, 
отсчитываемых от на-
чала экрана, идёт 
текст связанный с 
элементом списка. 
Если элемент списка 
не помещается в одну
 строчку,
то на следующих стр-
очках так же ставят-
ся пробельные симво-
лы так, чтобы был 
эффект отступа от 
края.
Так продолжается до 
следующего элемента.
 На следующем элеме-
нте всё начинается 
по новой: мы ставим 
маркер 
или следующий номер 
в нумерации, пробел-
ьные символы и текс-
т. Если список влож-
енный, то на каждую 
строчку ставится 
дополнительный отст-
уп в соответствии с 
уровнем вложенности.

          Заголовки 
отображаются по цен-
тру заданной ширины 
экрана. При этом за-
головок заключается 
в коробочку из симв-
олов '#'. 
Левая и правая гран-
ица коробочки обрам-
ляется в столько ре-
шёточек, какого уро-
вня заголовок, а св-
ерху и снизу отобра-
жается 
на всю ширину экрана
 строка из решёток. 
После заголовка обя-
зательно должна быть
 отображена пустая 
строка.

          Блок кода 
отображается таким 
образом, что строка 
начинается символом 
'@', далее 3 пробела
 и сам код, который 
никак 
не интерпретируется,
 и в случае выхода 
за границы экрана 
просто обрезается 
при отображении.

          Простые 
абзацы начинаются с 
отступа первой стро-
ки задаваемого числ-
ом пробелов. На ост-
альных строках отст-
упа уже нет.

####################
##  Требования к  ##
##  программному  ##
##      коду      ##
####################

          Программн-
ый код должен быть 
написан на C++ и со-
держать абстрактный 
базовый класс Abstr-
act_text,
который содержит сл-
едующие методы:

@   virtual unsigned
@   virtual unsigned
@   virtual int prin

          Каждый ло-
гический элемент те-
кста должен хранить-
ся как char* в насл-
еднике класса Abstr-
act_text. 
Запрещается использ-
овать классы std::s-
tring и std::vector.

          Каждый кл-
асс должен быть опи-
сан в собственном 
модуле.

          Требуется 
создать наследников 
данного класса, где 
каждый класс соотве-
тствует одному из 
типов абзацев в раз-
меченном тексте.
В наследниках необх-
одимо полностью опр-
еделить интерфейс 
класса-родителя, ре-
ализация которого 
будет осуществлять 
параметризованную 
печать текста.

          В програм-
ме должен быть класс
 Text_viewer, котор-
ый осуществляет чте-
ние текста из файла 
в хранилище во внут-
реннее для данного 
класса хранилище те-
кста, а также затем 
его распечатку 
на экран из хранили-
ща. Хранилище текста
 - массив указателей
 на объекты Abstrac-
t_text.

          После рас-
печатки текста, в 
стандартный поток 
ошибок должно быть 
выведено число симв-
олов и число слов в 
исходном тексте,
при этом несколько 
идущих подряд пробе-
льных символов явля-
ются одним сисмолом 
и служебные символы 
задающие разметку 
не участвуют в подс-
чёте числа символов 
и слов.

          В случае 
невозможности отобр-
ажения текста прогр-
амма должна выдавать
 сообщение об ошибки
 
с вразумительным оп-
исанием проблемы.

